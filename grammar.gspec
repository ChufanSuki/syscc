Ascending order of priority:
== !=
< <= > >=
+ -
* /
unary+ unary-
( )

program     = function-definition*
function-definition = declspec declarator "{" compound-stmt
declspec    = "int"
declarator = "*"* ident type-suffix
type-suffix = "(" func-params | Îµ | "[" num "]" type-suffix
func-params = (param ("," param)*)? ")"
param       = declspec declarator
declaration = declspec (declarator ("=" expr)? ("," declarator ("=" expr)?)*)? ";"
compound-stmt = (declaration | stmt)* "}"
stmt        = "return" expr ";" | expr-stmt | "{" compound-stmt | "if" "(" expr ")" stmt ("else" stmt)? | "for" "(" expr-stmt expr? ";" expr? ")" stmt | "while" "(" expr ")" stmt 
expr-stmt   = expr? ";"
expr        = assign
assign      = equality ("=" assign)?
equality    = relational ("==" relational | "!=" relational)*
relational  = add ("<" add | "<=" add | ">" add | ">=" add)*
add         = mul ("+" mul | "-" mul)*
mul         = unary ("*" unary | "/" unary)*
unary       = ("+" | "-" | "*" | "&")? primary
funcall     = ident "(" (assign ("," assign)*)? ")"
primary     = num | "(" expr ")" | ident func-args?
